@page "/CreatePost"
@using HttpClients.ClientsInterface
@using global::Shared.Models
@using global::Shared.DTOs.Post
@using Blazor.Services.Http
@inject IPostServices postService
@inject IUserServices userService
@inject IAuthService authService
@inject NavigationManager navMgr
@attribute [Authorize]
<h3>CreatePost</h3>
<AuthorizeView>
    <Authorized>
        <div class="card">
            @if (users == null)
            {
                <label>Loading...</label>
            }
            else
            {
                <h3>Create Post</h3>
                <div class="form-group field">
                    <label>Title:</label>
                    <input type="text" @bind="postTitle"/>
                </div>
                <div class="form-group field">
                    <label>Body:</label>
                    <input type="text" @bind="postBody"/>
                </div>
                <div class="form-group field">
                    <label>User:</label>
                    <label>@selectedUser</label>
                </div>
                <div class="button-row">
                    @if (!string.IsNullOrEmpty(msg))
                    {
                        <label style="color: red">@msg</label>
                    }
                    <button @onclick="Create" class="acceptbtn">Create</button>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <label>You need to log in...</label>
    </NotAuthorized>
</AuthorizeView>


@code {
    private IEnumerable<User>? users;
    private User user;
    private string? selectedUser;
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    private void Proceed()
    {
        navMgr.NavigateTo("/ViewPosts");
    }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
            selectedUser = authService.GetAuthAsync().Result.Identity!.Name;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (selectedUser == null)
        {
            msg = "You must be logged in!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            user = users.First(user1 => user1.Username.Equals(selectedUser));
            PostCreationDto dto = new(user.Id, postTitle, postBody);
            await postService.Create(dto);
            Proceed();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}